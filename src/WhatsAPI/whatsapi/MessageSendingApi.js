/**
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIResponse from '../models/APIResponse';
import ButtonMessagePayload from '../models/ButtonMessagePayload';
import ButtonMessageWithMediaPayload from '../models/ButtonMessageWithMediaPayload';
import ContactMessagePayload from '../models/ContactMessagePayload';
import GroupInviteMessagePayload from '../models/GroupInviteMessagePayload';
import ListMessagePayload from '../models/ListMessagePayload';
import LocationMessagePayload from '../models/LocationMessagePayload';
import PollMessagePayload from '../models/PollMessagePayload';
import SendAudioRequest from '../models/SendAudioRequest';
import SendDocumentRequest from '../models/SendDocumentRequest';
import SendMediaPayload from '../models/SendMediaPayload';
import SendVideoRequest from '../models/SendVideoRequest';
import TemplateButtonPayload from '../models/TemplateButtonPayload';
import TemplateButtonWithMediaPayload from '../models/TemplateButtonWithMediaPayload';
import TextMessage from '../models/TextMessage';
import UpdateProfilePicRequest from '../models/UpdateProfilePicRequest';
import UploadMediaRequest from '../models/UploadMediaRequest';

/**
* MessageSending service.
* @module WhatsAPI/whatsapi/MessageSendingApi
* @version 1.0.0
*/
export default class MessageSendingApi {

    /**
    * Constructs a new MessageSendingApi. 
    * @alias module:WhatsAPI/whatsapi/MessageSendingApi
    * @class
    * @param {module:WhatsAPI/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:WhatsAPI/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sendAudio operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send raw audio.
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param {String} instanceKey Instance key
     * @param {String} to The recipient's number
     * @param {module:WhatsAPI/models/SendAudioRequest} sendAudioRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.caption Attached caption
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendAudio(instanceKey, to, sendAudioRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendAudioRequest;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendAudio");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendAudio");
      }
      // verify the required parameter 'sendAudioRequest' is set
      if (sendAudioRequest === undefined || sendAudioRequest === null) {
        throw new Error("Missing the required parameter 'sendAudioRequest' when calling sendAudio");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
        'to': to,
        'caption': opts['caption']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/audio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendButtonMessage operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendButtonMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a button message.
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/ButtonMessagePayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendButtonMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendButtonMessage(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendButtonMessage");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendButtonMessage");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/buttons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendButtonWithMedia operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendButtonWithMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a button message with a media header.
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/ButtonMessageWithMediaPayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendButtonWithMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendButtonWithMedia(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendButtonWithMedia");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendButtonWithMedia");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/button-media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendContact operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendContactCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a contact message.
     * Sends a contact (vcard) message to the given user.
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/ContactMessagePayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendContact(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendContact");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendContact");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/contact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDocument operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send raw document.
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param {String} instanceKey Instance key
     * @param {String} to The recipient's number
     * @param {module:WhatsAPI/models/SendDocumentRequest} sendDocumentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.caption Attached caption
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendDocument(instanceKey, to, sendDocumentRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendDocumentRequest;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendDocument");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendDocument");
      }
      // verify the required parameter 'sendDocumentRequest' is set
      if (sendDocumentRequest === undefined || sendDocumentRequest === null) {
        throw new Error("Missing the required parameter 'sendDocumentRequest' when calling sendDocument");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
        'to': to,
        'caption': opts['caption']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/document', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendGroupInvite operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendGroupInviteCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a group invite message
     * Sends a group invite message to the specified number. Don't include \"https://chat.whatsapp.com/\" in the invite code.
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/GroupInviteMessagePayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendGroupInviteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendGroupInvite(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendGroupInvite");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendGroupInvite");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/group-invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendImage operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendImageCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send raw image.
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param {String} instanceKey Instance key
     * @param {String} to The recipient's number
     * @param {module:WhatsAPI/models/UpdateProfilePicRequest} updateProfilePicRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.caption Attached caption
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendImage(instanceKey, to, updateProfilePicRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProfilePicRequest;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendImage");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendImage");
      }
      // verify the required parameter 'updateProfilePicRequest' is set
      if (updateProfilePicRequest === undefined || updateProfilePicRequest === null) {
        throw new Error("Missing the required parameter 'updateProfilePicRequest' when calling sendImage");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
        'to': to,
        'caption': opts['caption']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendListMessage operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendListMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a List message.
     * Sends an interactive List message to the given user.
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/ListMessagePayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendListMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendListMessage(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendListMessage");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendListMessage");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendLocation operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a location message.
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/LocationMessagePayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendLocation(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendLocation");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendLocation");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/location', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMediaMessage operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendMediaMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a media message.
     * Sends a media message to the given user.
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/SendMediaPayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendMediaMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendMediaMessage(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendMediaMessage");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendMediaMessage");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPollMessage operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendPollMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a Poll message.
     * Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/PollMessagePayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendPollMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendPollMessage(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendPollMessage");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendPollMessage");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/poll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTemplate operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a template message.
     * Sends an interactive template message to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/TemplateButtonPayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendTemplate(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendTemplate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendTemplate");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTemplateWithMedia operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendTemplateWithMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a template message with media.
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \"replyButton\", \"urlButton\", \"callButton\"
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/TemplateButtonWithMediaPayload} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendTemplateWithMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendTemplateWithMedia(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendTemplateWithMedia");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendTemplateWithMedia");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/template-media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTextMessage operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendTextMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a text message.
     * Sends a text message to the given user.
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/TextMessage} data Message data
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendTextMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendTextMessage(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendTextMessage");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling sendTextMessage");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/text', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendVideo operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~sendVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send raw video.
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param {String} instanceKey Instance key
     * @param {String} to The recipient's number
     * @param {module:WhatsAPI/models/SendVideoRequest} sendVideoRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.caption Attached caption
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~sendVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    sendVideo(instanceKey, to, sendVideoRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendVideoRequest;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling sendVideo");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendVideo");
      }
      // verify the required parameter 'sendVideoRequest' is set
      if (sendVideoRequest === undefined || sendVideoRequest === null) {
        throw new Error("Missing the required parameter 'sendVideoRequest' when calling sendVideo");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
        'to': to,
        'caption': opts['caption']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/video', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMedia operation.
     * @callback module:WhatsAPI/whatsapi/MessageSendingApi~uploadMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload media.
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/String} type Media type
     * @param {module:WhatsAPI/models/UploadMediaRequest} uploadMediaRequest 
     * @param {module:WhatsAPI/whatsapi/MessageSendingApi~uploadMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    uploadMedia(instanceKey, type, uploadMediaRequest, callback) {
      let postBody = uploadMediaRequest;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling uploadMedia");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling uploadMedia");
      }
      // verify the required parameter 'uploadMediaRequest' is set
      if (uploadMediaRequest === undefined || uploadMediaRequest === null) {
        throw new Error("Missing the required parameter 'uploadMediaRequest' when calling uploadMedia");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/send/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

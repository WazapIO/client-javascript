/**
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIResponse from '../models/APIResponse';
import GroupCreatePayload from '../models/GroupCreatePayload';
import GroupUpdateDescriptionPayload from '../models/GroupUpdateDescriptionPayload';
import GroupUpdateNamePayload from '../models/GroupUpdateNamePayload';
import GroupUpdateParticipantsPayload from '../models/GroupUpdateParticipantsPayload';
import SetGroupPictureRequest from '../models/SetGroupPictureRequest';

/**
* GroupManagement service.
* @module WhatsAPI/whatsapi/GroupManagementApi
* @version 1.0.0
*/
export default class GroupManagementApi {

    /**
    * Constructs a new GroupManagementApi. 
    * @alias module:WhatsAPI/whatsapi/GroupManagementApi
    * @class
    * @param {module:WhatsAPI/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:WhatsAPI/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addParticipant operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~addParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add participant.
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/models/GroupUpdateParticipantsPayload} data Group update payload
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~addParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    addParticipant(instanceKey, groupId, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling addParticipant");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addParticipant");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling addParticipant");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/participants/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create group.
     * Creates a group with the participant data. The creator is automatically added to the group.
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/GroupCreatePayload} data Group create payload
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    createGroup(instanceKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling createGroup");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createGroup");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demoteParticipant operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~demoteParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Demote participant.
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/models/GroupUpdateParticipantsPayload} data Group update payload
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~demoteParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    demoteParticipant(instanceKey, groupId, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling demoteParticipant");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling demoteParticipant");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling demoteParticipant");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/participants/demote', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdminGroups operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~getAdminGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get admin groups.
     * Returns list of all groups in which you are admin.
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~getAdminGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    getAdminGroups(instanceKey, callback) {
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling getAdminGroups");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/admin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllGroups operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~getAllGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all groups.
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * @param {String} instanceKey Instance key
     * @param {Object} opts Optional parameters
     * @param {module:WhatsAPI/models/String} opts.includeParticipants Include participants data (default to 'true')
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~getAllGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    getAllGroups(instanceKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling getAllGroups");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
        'include_participants': opts['includeParticipants']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllParticipants operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~getAllParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all participants.
     * Returns all participants of the group.
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~getAllParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    getAllParticipants(instanceKey, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling getAllParticipants");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getAllParticipants");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group.
     * Fetches the group data.
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    getGroup(instanceKey, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling getGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroup");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupFromInviteLink operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~getGroupFromInviteLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group from invite link.
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * @param {String} instanceKey Instance key
     * @param {String} inviteLink The invite link to check
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~getGroupFromInviteLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    getGroupFromInviteLink(instanceKey, inviteLink, callback) {
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling getGroupFromInviteLink");
      }
      // verify the required parameter 'inviteLink' is set
      if (inviteLink === undefined || inviteLink === null) {
        throw new Error("Missing the required parameter 'inviteLink' when calling getGroupFromInviteLink");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
        'invite_link': inviteLink
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/invite-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupInviteCode operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~getGroupInviteCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group invite code.
     * Gets the invite code of the group.
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~getGroupInviteCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    getGroupInviteCode(instanceKey, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling getGroupInviteCode");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupInviteCode");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/invite-code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the joinGroupWithLink operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~joinGroupWithLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join group with invite code.
     * Joins a group with group invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode} You have to put invite_code in the url of the request. The invite code is the part after https://chat.whatsapp.com/ For example, if the invite link is https://chat.whatsapp.com/dsfsf34r3d3dsds, then the invite code is `dsfsf34r3d3dsds“
     * @param {String} instanceKey Instance key
     * @param {String} inviteCode The invite code of group you want to join
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~joinGroupWithLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    joinGroupWithLink(instanceKey, inviteCode, callback) {
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling joinGroupWithLink");
      }
      // verify the required parameter 'inviteCode' is set
      if (inviteCode === undefined || inviteCode === null) {
        throw new Error("Missing the required parameter 'inviteCode' when calling joinGroupWithLink");
      }

      let pathParams = {
        'instance_key': instanceKey
      };
      let queryParams = {
        'invite_code': inviteCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/join', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaveGroup operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~leaveGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leaves the group.
     * Leaves the specified group.
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~leaveGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    leaveGroup(instanceKey, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling leaveGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling leaveGroup");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promoteParticipant operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~promoteParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote participant.
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/models/GroupUpdateParticipantsPayload} data Group update payload
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~promoteParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    promoteParticipant(instanceKey, groupId, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling promoteParticipant");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling promoteParticipant");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling promoteParticipant");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/participants/promote', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeParticipant operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~removeParticipantCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove participant.
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/models/GroupUpdateParticipantsPayload} data Group update payload
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~removeParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    removeParticipant(instanceKey, groupId, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling removeParticipant");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling removeParticipant");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling removeParticipant");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/participants/remove', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setGroupAnnounce operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~setGroupAnnounceCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set group announce.
     * Set if non-admins are allowed to send messages in groups
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/Boolean} announce Announce status
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~setGroupAnnounceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    setGroupAnnounce(instanceKey, announce, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling setGroupAnnounce");
      }
      // verify the required parameter 'announce' is set
      if (announce === undefined || announce === null) {
        throw new Error("Missing the required parameter 'announce' when calling setGroupAnnounce");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling setGroupAnnounce");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'announce': announce,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/announce', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setGroupDescription operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~setGroupDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set group description.
     * Changes the group description
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/models/GroupUpdateDescriptionPayload} data Group description data
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~setGroupDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    setGroupDescription(instanceKey, groupId, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling setGroupDescription");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling setGroupDescription");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling setGroupDescription");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/description', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setGroupLocked operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~setGroupLockedCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set group locked.
     * Set if non-admins are allowed to change the group dp and other stuff
     * @param {String} instanceKey Instance key
     * @param {module:WhatsAPI/models/Boolean} locked Locked status
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~setGroupLockedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    setGroupLocked(instanceKey, locked, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling setGroupLocked");
      }
      // verify the required parameter 'locked' is set
      if (locked === undefined || locked === null) {
        throw new Error("Missing the required parameter 'locked' when calling setGroupLocked");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling setGroupLocked");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'locked': locked,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/lock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setGroupName operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~setGroupNameCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set group name.
     * Changes the group name. The max limit is 22 chars
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/models/GroupUpdateNamePayload} data Group name data
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~setGroupNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    setGroupName(instanceKey, groupId, data, callback) {
      let postBody = data;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling setGroupName");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling setGroupName");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling setGroupName");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setGroupPicture operation.
     * @callback module:WhatsAPI/whatsapi/GroupManagementApi~setGroupPictureCallback
     * @param {String} error Error message, if any.
     * @param {module:WhatsAPI/models/APIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set group picture.
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * @param {String} instanceKey Instance key
     * @param {String} groupId Group id of the group
     * @param {module:WhatsAPI/models/SetGroupPictureRequest} setGroupPictureRequest 
     * @param {module:WhatsAPI/whatsapi/GroupManagementApi~setGroupPictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:WhatsAPI/models/APIResponse}
     */
    setGroupPicture(instanceKey, groupId, setGroupPictureRequest, callback) {
      let postBody = setGroupPictureRequest;
      // verify the required parameter 'instanceKey' is set
      if (instanceKey === undefined || instanceKey === null) {
        throw new Error("Missing the required parameter 'instanceKey' when calling setGroupPicture");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling setGroupPicture");
      }
      // verify the required parameter 'setGroupPictureRequest' is set
      if (setGroupPictureRequest === undefined || setGroupPictureRequest === null) {
        throw new Error("Missing the required parameter 'setGroupPictureRequest' when calling setGroupPicture");
      }

      let pathParams = {
        'instance_key': instanceKey,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;
      return this.apiClient.callApi(
        '/instances/{instance_key}/groups/{group_id}/profile-pic', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

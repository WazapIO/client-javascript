/**
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileUpload model module.
 * @module WhatsAPI/models/FileUpload
 * @version 1.0.0
 */
class FileUpload {
    /**
     * Constructs a new <code>FileUpload</code>.
     * @alias module:WhatsAPI/models/FileUpload
     * @param directPath {String} 
     * @param fileEncSha256 {Array.<Number>} 
     * @param fileLength {Number} 
     * @param fileSha256 {Array.<Number>} 
     * @param mediaKey {Array.<Number>} 
     * @param mimeType {String} 
     * @param url {String} 
     */
    constructor(directPath, fileEncSha256, fileLength, fileSha256, mediaKey, mimeType, url) { 
        
        FileUpload.initialize(this, directPath, fileEncSha256, fileLength, fileSha256, mediaKey, mimeType, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, directPath, fileEncSha256, fileLength, fileSha256, mediaKey, mimeType, url) { 
        obj['direct_path'] = directPath;
        obj['file_enc_sha256'] = fileEncSha256;
        obj['file_length'] = fileLength;
        obj['file_sha256'] = fileSha256;
        obj['media_key'] = mediaKey;
        obj['mime_type'] = mimeType;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>FileUpload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:WhatsAPI/models/FileUpload} obj Optional instance to populate.
     * @return {module:WhatsAPI/models/FileUpload} The populated <code>FileUpload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileUpload();

            if (data.hasOwnProperty('direct_path')) {
                obj['direct_path'] = ApiClient.convertToType(data['direct_path'], 'String');
            }
            if (data.hasOwnProperty('file_enc_sha256')) {
                obj['file_enc_sha256'] = ApiClient.convertToType(data['file_enc_sha256'], ['Number']);
            }
            if (data.hasOwnProperty('file_length')) {
                obj['file_length'] = ApiClient.convertToType(data['file_length'], 'Number');
            }
            if (data.hasOwnProperty('file_sha256')) {
                obj['file_sha256'] = ApiClient.convertToType(data['file_sha256'], ['Number']);
            }
            if (data.hasOwnProperty('media_key')) {
                obj['media_key'] = ApiClient.convertToType(data['media_key'], ['Number']);
            }
            if (data.hasOwnProperty('mime_type')) {
                obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileUpload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileUpload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FileUpload.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['direct_path'] && !(typeof data['direct_path'] === 'string' || data['direct_path'] instanceof String)) {
            throw new Error("Expected the field `direct_path` to be a primitive type in the JSON string but got " + data['direct_path']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['file_enc_sha256'])) {
            throw new Error("Expected the field `file_enc_sha256` to be an array in the JSON data but got " + data['file_enc_sha256']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['file_sha256'])) {
            throw new Error("Expected the field `file_sha256` to be an array in the JSON data but got " + data['file_sha256']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['media_key'])) {
            throw new Error("Expected the field `media_key` to be an array in the JSON data but got " + data['media_key']);
        }
        // ensure the json data is a string
        if (data['mime_type'] && !(typeof data['mime_type'] === 'string' || data['mime_type'] instanceof String)) {
            throw new Error("Expected the field `mime_type` to be a primitive type in the JSON string but got " + data['mime_type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

FileUpload.RequiredProperties = ["direct_path", "file_enc_sha256", "file_length", "file_sha256", "media_key", "mime_type", "url"];

/**
 * @member {String} direct_path
 */
FileUpload.prototype['direct_path'] = undefined;

/**
 * @member {Array.<Number>} file_enc_sha256
 */
FileUpload.prototype['file_enc_sha256'] = undefined;

/**
 * @member {Number} file_length
 */
FileUpload.prototype['file_length'] = undefined;

/**
 * @member {Array.<Number>} file_sha256
 */
FileUpload.prototype['file_sha256'] = undefined;

/**
 * @member {Array.<Number>} media_key
 */
FileUpload.prototype['media_key'] = undefined;

/**
 * @member {String} mime_type
 */
FileUpload.prototype['mime_type'] = undefined;

/**
 * @member {String} url
 */
FileUpload.prototype['url'] = undefined;






export default FileUpload;


/**
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TemplateButton model module.
 * @module WhatsAPI/models/TemplateButton
 * @version 1.0.0
 */
class TemplateButton {
    /**
     * Constructs a new <code>TemplateButton</code>.
     * @alias module:WhatsAPI/models/TemplateButton
     * @param title {String} 
     * @param type {String} Valid types are replyButton, urlButton & callButton
     */
    constructor(title, type) { 
        
        TemplateButton.initialize(this, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, type) { 
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>TemplateButton</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:WhatsAPI/models/TemplateButton} obj Optional instance to populate.
     * @return {module:WhatsAPI/models/TemplateButton} The populated <code>TemplateButton</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateButton();

            if (data.hasOwnProperty('button_id')) {
                obj['button_id'] = ApiClient.convertToType(data['button_id'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateButton</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateButton</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TemplateButton.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['button_id'] && !(typeof data['button_id'] === 'string' || data['button_id'] instanceof String)) {
            throw new Error("Expected the field `button_id` to be a primitive type in the JSON string but got " + data['button_id']);
        }
        // ensure the json data is a string
        if (data['payload'] && !(typeof data['payload'] === 'string' || data['payload'] instanceof String)) {
            throw new Error("Expected the field `payload` to be a primitive type in the JSON string but got " + data['payload']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

TemplateButton.RequiredProperties = ["title", "type"];

/**
 * Make sure this is unique
 * @member {String} button_id
 */
TemplateButton.prototype['button_id'] = undefined;

/**
 * @member {String} payload
 */
TemplateButton.prototype['payload'] = undefined;

/**
 * @member {String} title
 */
TemplateButton.prototype['title'] = undefined;

/**
 * Valid types are replyButton, urlButton & callButton
 * @member {String} type
 */
TemplateButton.prototype['type'] = undefined;






export default TemplateButton;

